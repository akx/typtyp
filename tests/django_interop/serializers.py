"""
Serializers for the pet sitting app, generated by Claude.
"""

from django.contrib.auth.models import User
from django.utils import timezone
from rest_framework import serializers

from .models import PetEmergencyContact, PetMedication, PetSittingGig


class UserSerializer(serializers.ModelSerializer):
    """Basic user serializer for nested relationships"""

    full_name = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = ["id", "username", "first_name", "last_name", "email", "full_name"]
        read_only_fields = ["id"]

    def get_full_name(self, obj):
        return f"{obj.first_name} {obj.last_name}".strip() or obj.username


class PetEmergencyContactSerializer(serializers.ModelSerializer):
    """Serializer for emergency contacts"""

    class Meta:
        model = PetEmergencyContact
        fields = ["id", "name", "phone", "relationship", "availability"]
        read_only_fields = ["id"]


class PetMedicationSerializer(serializers.ModelSerializer):
    """Serializer for pet medications"""

    class Meta:
        model = PetMedication
        fields = ["id", "medication_name", "dosage", "frequency", "administration_method"]
        read_only_fields = ["id"]


class PetSittingGigSerializer(serializers.ModelSerializer):
    """
    Main serializer for pet sitting gigs with all the bells and whistles
    """

    # Nested serializers for related objects
    emergency_contacts = PetEmergencyContactSerializer(many=True, read_only=True)
    medications = PetMedicationSerializer(many=True, read_only=True)
    sitter = UserSerializer(read_only=True)
    backup_sitter = serializers.PrimaryKeyRelatedField(read_only=True)  # To test PrimaryKeyRelatedField

    # Computed fields
    total_days = serializers.ReadOnlyField()
    total_cost = serializers.ReadOnlyField()
    is_current_gig = serializers.SerializerMethodField()
    gig_status = serializers.SerializerMethodField()
    days_until_start = serializers.SerializerMethodField()

    # Display fields for choices
    pet_species_display = serializers.CharField(source="get_pet_species_display", read_only=True)
    difficulty_level_display = serializers.CharField(source="get_difficulty_level_display", read_only=True)
    payment_status_display = serializers.CharField(source="get_payment_status_display", read_only=True)

    # Custom field handling
    house_wifi_password = serializers.CharField(write_only=True, required=False, allow_blank=True)
    house_wifi_password_encrypted = serializers.SerializerMethodField()

    # Base64 encoded image fields for API convenience
    pet_photo_base64 = serializers.CharField(write_only=True, required=False, allow_blank=True)
    vaccination_records_base64 = serializers.CharField(write_only=True, required=False, allow_blank=True)
    house_key_photo_base64 = serializers.CharField(write_only=True, required=False, allow_blank=True)

    class Meta:
        model = PetSittingGig
        fields = [
            # Basic info
            "id",
            "gig_number",
            "slug",
            "pet_name",
            "pet_nickname",
            "pet_species",
            "pet_species_display",
            "number_of_pets",
            "pet_weight",
            # Dates and times
            "start_date",
            "end_date",
            "start_time",
            "last_fed",
            "typical_walk_duration",
            # Financial
            "daily_rate",
            "payment_status",
            "payment_status_display",
            # Difficulty and care
            "difficulty_level",
            "difficulty_level_display",
            "owner_anxiety_level",
            # Boolean flags
            "is_house_trained",
            "needs_medication",
            "is_escape_artist",
            "owner_has_security_cameras",
            "pet_is_social_media_famous",
            # Contact and emergency
            "owner_email",
            "pet_instagram",
            "vet_website",
            "house_alarm_code",
            "security_camera_ip",
            # Files and media
            "pet_photo",
            "vaccination_records",
            "house_key_photo",
            "pet_photo_base64",
            "vaccination_records_base64",
            "house_key_photo_base64",
            # Text fields
            "owner_notes",
            "emergency_contact_info",
            "secret_treat_hiding_spots",
            "special_instructions",
            # Security
            "house_wifi_password",
            "house_wifi_password_encrypted",
            # Relationships
            "sitter",
            "backup_sitter",
            "emergency_contacts",
            "medications",
            # Computed fields
            "total_days",
            "total_cost",
            "is_current_gig",
            "gig_status",
            "days_until_start",
            # Timestamps
            "created_at",
            "updated_at",
        ]
        read_only_fields = ["id", "gig_number", "slug", "created_at", "updated_at", "total_days", "total_cost"]
        extra_kwargs = {
            "house_alarm_code": {"write_only": True},
            "security_camera_ip": {"write_only": True},
        }

    def get_is_current_gig(self, obj):
        """Check if this gig is currently active"""
        return obj.is_current()

    def get_gig_status(self, obj):
        """Human-readable status of the gig"""
        today = timezone.now().date()

        if obj.end_date < today:
            return "Completed"
        elif obj.start_date > today:
            return "Upcoming"
        else:
            return "In Progress"

    def get_days_until_start(self, obj):
        """Days until the gig starts (negative if already started)"""
        today = timezone.now().date()
        delta = (obj.start_date - today).days
        return delta

    def get_house_wifi_password_encrypted(self, obj):
        """Indicate if WiFi password is stored (without revealing it)"""
        return bool(obj.house_wifi_password)


class PetSittingGigSummarySerializer(serializers.ModelSerializer):
    """Lightweight serializer for listing gigs"""

    pet_species_display = serializers.CharField(source="get_pet_species_display", read_only=True)
    difficulty_level_display = serializers.CharField(source="get_difficulty_level_display", read_only=True)
    sitter_name = serializers.CharField(source="sitter.username", read_only=True)
    total_cost = serializers.ReadOnlyField()
    gig_status = serializers.SerializerMethodField()

    class Meta:
        model = PetSittingGig
        fields = [
            "id",
            "pet_name",
            "pet_species_display",
            "start_date",
            "end_date",
            "daily_rate",
            "total_cost",
            "difficulty_level_display",
            "sitter_name",
            "gig_status",
        ]

    def get_gig_status(self, obj):
        """Human-readable status of the gig"""
        today = timezone.now().date()

        if obj.end_date < today:
            return "Completed"
        elif obj.start_date > today:
            return "Upcoming"
        else:
            return "In Progress"


class PetSittingGigCreateSerializer(serializers.ModelSerializer):
    """Specialized serializer for creating gigs with required fields only"""

    class Meta:
        model = PetSittingGig
        fields = [
            "pet_name",
            "pet_species",
            "start_date",
            "end_date",
            "start_time",
            "daily_rate",
            "owner_email",
            "number_of_pets",
            "pet_weight",
            "is_house_trained",
            "difficulty_level",
            "owner_notes",
        ]
